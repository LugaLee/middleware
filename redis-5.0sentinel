     +------------------+----------+--------------+------------------+-------------------+
     | Hostname        |   IP Addr  |   Redis Port   | Sentinel Port |       Remark      |
     +------------------+----------+--------------+------------------+-------------------+
     | M               | 10.10.10.10|      2222      |  222222       |                   |
     +------------------+----------+--------------+------------------+-------------------+
     | S               | 11.11.11.11|      2222      |  22222        |                   |
     +------------------+----------+--------------+------------------+-------------------+
     | S               | 12.12.12.12|      2222      |  22222        |                   |
     +------------------+----------+--------------+------------------+-------------------+
1、哨兵架构
    
     它由两部分组成，哨兵节点和数据节点：

     哨兵节点：哨兵系统由一个或多个哨兵节点组成，哨兵节点是特殊的redis节点，不存储数据。
     数据节点：主节点和从节点都是数据节点
    

2、下载安装（M-2S主机均进行）

    [root@testserver ~]# wget http://download.redis.io/releases/redis-5.0.0.tar.gz      //获取最新发布的稳定版redis-5.0.0下载地址
    [root@testserver ~]# tar zxvf redis-5.0.0.tar.gz -C /usr/local/
    [root@testserver ~]# cd /usr/local/redis-5.0.0/
    [root@testserver redis-5.0.0]# make
    输出：
    Hint: It's a good idea to run 'make test' ;)
    make[1]: Leaving directory `/usr/local/redis-5.0.0/src'

    [root@testserver redis-5.0.0]# make install
    输出：
        cd src && make install
    make[1]: Entering directory `/usr/local/redis-5.0.0/src'
        CC Makefile.dep
    make[1]: Leaving directory `/usr/local/redis-5.0.0/src'
    make[1]: Entering directory `/usr/local/redis-5.0.0/src'

    Hint: It's a good idea to run 'make test' ;)

        INSTALL install
        INSTALL install
        INSTALL install
        INSTALL install
        INSTALL install
    make[1]: Leaving directory `/usr/local/redis-5.0.0/src'

3、  Master-Replica 主从配置优化

     [root@testserver redis-5.0.0]#vi redis.conf
      针对M主机，主要更新以下参数：
      bind 10.10.10.10
      port 2222
      daemonize yes   //设置为“yes”，表明服务在后台运行
      protected-mode yes     //客户端连接认证开启
      pidfile /var/run/redis_2222.pid
      dir /usr/local/redis-5.0.0/data     //存放集群节点数据信息
      logfile "/usr/local/redis-5.0.0/logs/redis-2222.log"    //定义日志路径
      requirepass requirepass@fuck-id.com!!!    //开启访问密码认证（密码设置可以在集群前后均可）
      。。。
      
      针对Slave从主机，需添加以下参数：
      replicaof 10.10.10.10 2222                 //redis 5.x之前为slaveof参数
      masterauth requirepass@fuck-id.com!!!      //访问Master主服务时的密码认证
      
 4、  服务启动
 
      [root@testserver src]# ./redis-server /usr/local/redis-5.0.0/redis.conf 
      [root@testserver src]# ps -ef|grep redis
      root      9710     1  0 14:42 ?        00:00:00 ./redis-server 10.10.10.10:2222                  
      root      9715  5169  0 14:42 pts/1    00:00:00 grep redis
      [root@testserver src]# tail -f /usr/local/redis-5.0.0/redis-2222.log 
      
      [root@XWF-MKZ: src]# ./redis-server /usr/local/redis-5.0.0/redis.conf 
      [root@XWF-MKZ:/usr/local/redis-5.0.0]# ps -ef|grep redis
      root      6475     1  0 17:57 ?        00:00:00 src/redis-server 11.11.11.11:2222           
      root      6611 17088  0 17:57 pts/0    00:00:00 grep --color=auto redis
      root@XWF-MKZ:/usr/local/redis-5.0.0# tail -f /usr/local/redis-5.0.0/logs/redis-2222.log 
      32484:S 30 Oct 2018 18:16:45.770 * Connecting to MASTER 10.10.10.10:2222            //此日志表明已与Master主服务建立通信连接
      32484:S 30 Oct 2018 18:16:45.770 * MASTER <-> REPLICA sync started
      32484:S 30 Oct 2018 18:16:45.771 * Non blocking connect for SYNC fired the event.
      32484:S 30 Oct 2018 18:16:45.772 * Master replied to PING, replication can continue...
      32484:S 30 Oct 2018 18:16:45.772 * Partial resynchronization not possible (no cached master)
      32484:S 30 Oct 2018 18:16:45.774 * Full resync from master: 017bda680e2d138dc56185299801e3da1fccb11f:630
      32484:S 30 Oct 2018 18:16:45.875 * MASTER <-> REPLICA sync: receiving 176 bytes from master
      32484:S 30 Oct 2018 18:16:45.875 * MASTER <-> REPLICA sync: Flushing old data
      32484:S 30 Oct 2018 18:16:45.875 * MASTER <-> REPLICA sync: Loading DB in memory
      32484:S 30 Oct 2018 18:16:45.875 * MASTER <-> REPLICA sync: Finished with success
      
      [root@XWF-BorgenCouchbase01: src]# ./redis-server /usr/local/redis-5.0.0/redis.conf 
      [root@XWF-BorgenCouchbase01:/usr/local/redis-5.0.0]# ps -ef|grep redis
      root     18558     1  0 17:44 ?        00:00:01 src/redis-server 12.12.12.12:2222           
      root     19958 12875  0 18:02 pts/1    00:00:00 grep --color=auto redis
      [root@XWF-BorgenCouchbase01 src]# tail -f /usr/local/redis-5.0.0/redis-2222.log 
      8408:S 30 Oct 2018 18:33:38.750 * Connecting to MASTER 10.10.10.10:2222               //此日志表明已与Master主服务建立通信连接
      8408:S 30 Oct 2018 18:33:38.750 * MASTER <-> REPLICA sync started
      8408:S 30 Oct 2018 18:33:38.751 * Non blocking connect for SYNC fired the event.
      8408:S 30 Oct 2018 18:33:38.751 * Master replied to PING, replication can continue...
      8408:S 30 Oct 2018 18:33:38.752 * Partial resynchronization not possible (no cached master)
      8408:S 30 Oct 2018 18:33:38.764 * Full resync from master: 017bda680e2d138dc56185299801e3da1fccb11f:0
      8408:S 30 Oct 2018 18:33:38.852 * MASTER <-> REPLICA sync: receiving 175 bytes from master
      8408:S 30 Oct 2018 18:33:38.853 * MASTER <-> REPLICA sync: Flushing old data
      8408:S 30 Oct 2018 18:33:38.853 * MASTER <-> REPLICA sync: Loading DB in memory
      8408:S 30 Oct 2018 18:33:38.853 * MASTER <-> REPLICA sync: Finished with success
      
5、 M-S主从节点状态查看
      登陆Master主服务器，执行节点状态查看命令以确认节点启动后，连接主节点的从节点状态是否正常。
      [root@XWF-BorgenCouchbase01:/usr/local/redis-5.0.0/src]# ./redis-cli -h 10.10.10.10 -p 2222 -a 'requirepass@fuck-id.com!!!' 
      10.10.10.10:2222> info Replication
      # Replication
      role:master
      connected_slaves:2
      slave0:ip=11.11.11.11,port=2222,state=online,offset=196,lag=1
      slave1:ip=12.12.12.12,port=2222,state=online,offset=196,lag=1
      master_replid:491629e550cba63cf252b2aee7cd991bf76ec03f
      master_replid2:0000000000000000000000000000000000000000
      master_repl_offset:196
      second_repl_offset:-1
      repl_backlog_active:1
      repl_backlog_size:1048576
      repl_backlog_first_byte_offset:1
      repl_backlog_histlen:196
      
6、  Redis Master-Replica Sentinel模式配置
      
     （1） Master（IP为10.10.10.10）哨兵配置
      针对M主机，主要更新以下参数：
      bind 10.10.10.10
      port 22222
      daemonize yes   //设置为“yes”，表明服务在后台运行
      protected-mode yes     //客户端连接认证开启
      dir /usr/local/redis-5.0.0/data     //存放集群节点数据信息
      logfile "/usr/local/redis-5.0.0/logs/redis--sentinel-2222.log"    //定义日志路径
      
      sentinel monitor mymaster 10.10.10.10 22222 2
      sentinel auth-pass mymaster requirepass@fuck-id.com!!!   //开启访问密码认证（密码设置可以在集群前后均可）
      sentinel down-after-milliseconds mymaster 30000
      sentinel failover-timeout mymaster 180000
      
     （2）Master主机监听服务启动
      [root@XWF-BorgenCouchbase01:/usr/local/redis-5.0.0]# src/redis-sentinel ../redis-5.0.0/sentinel.conf 
      [root@XWF-BorgenCouchbase01:/usr/local/redis-5.0.0]# ps -ef|grep redis
      root     18558     1  0 17:44 ?        00:00:04 src/redis-server 10.10.10.10:2222           
      root     23318 23268  0 18:43 pts/0    00:00:00 tail -f redis--sentinel-2222.log
      root     23385     1  0 18:44 ?        00:00:00 src/redis-sentinel 10.10.10.10:22222 [sentinel]  
      root     23391 12875  0 18:44 pts/1    00:00:00 grep --color=auto redis
   
      root@XWF-BorgenCouchbase01:/usr/local/redis-5.0.0/logs# tail -f redis--sentinel-2222.log 
      23384:X 30 Oct 2018 18:44:51.252 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
      23384:X 30 Oct 2018 18:44:51.252 # Redis version=5.0.0, bits=64, commit=00000000, modified=0, pid=23384, just started
      23384:X 30 Oct 2018 18:44:51.252 # Configuration loaded
      23385:X 30 Oct 2018 18:44:51.253 * Increased maximum number of open files to 10032 (it was originally set to 1024).
      23385:X 30 Oct 2018 18:44:51.254 * Running mode=sentinel, port=22222.
      23385:X 30 Oct 2018 18:44:51.254 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
      23385:X 30 Oct 2018 18:44:51.296 # Sentinel ID is e36ae36386f876bf7845896fa7f47c666b4f2bb2
      23385:X 30 Oct 2018 18:44:51.296 # +monitor master mymaster 10.10.10.10 2222 quorum 2
      23385:X 30 Oct 2018 18:44:51.297 * +slave slave 11.11.11.11:2222 11.11.11.11 2222 @ mymaster 10.10.10.10 2222
      23385:X 30 Oct 2018 18:44:51.326 * +slave slave 12.12.12.12:2222 12.12.12.12 2222 @ mymaster 10.10.10.10 2222
      23385:X 30 Oct 2018 18:58:08.200 * +sentinel sentinel 2de562513d7f6923704dd231ca1be1a1370f77c4 12.12.12.12 22222 @ mymaster 10.10.10.10 2222
      23385:X 01 Nov 2018 09:47:34.352 * +sentinel sentinel f894a10fb3da379d584801dd94ec8e9abfee869c 11.11.11.11 22222 @ mymaster 10.10.10.10 2222
      
     （3）Replica从主机（IP为11.11.11.11及12.12.12.12）哨兵配置
      bind 11.11.11.11/12.12.12.12
      port 22222
      daemonize yes   //设置为“yes”，表明服务在后台运行
      protected-mode yes     //客户端连接认证开启
      dir /usr/local/redis-5.0.0/data     //存放集群节点数据信息
      logfile "/usr/local/redis-5.0.0/logs/redis--sentinel-2222.log"    //定义日志路径
      
      sentinel monitor mymaster 10.10.10.10 22222 2
      sentinel auth-pass mymaster requirepass@fuck-id.com!!!   //开启访问密码认证（密码设置可以在集群前后均可）
      sentinel down-after-milliseconds mymaster 30000
      sentinel failover-timeout mymaster 180000

      （4）Replica从主机监听服务启动
      [root@XWF-MKZ:/usr/local/redis-5.0.0]# src/redis-sentinel ../redis-5.0.0/sentinel.conf 
      [root@XWF-MKZ:/usr/local/redis-5.0.0]# ps -ef|grep redis
      root     18558     1  0 17:44 ?        00:00:04 src/redis-server 11.11.11.11:2222           
      root     23318 23268  0 18:43 pts/0    00:00:00 tail -f redis--sentinel-2222.log
      root     23385     1  0 18:44 ?        00:00:00 src/redis-sentinel 11.11.11.11:22222 [sentinel]  
      root     23391 12875  0 18:44 pts/1    00:00:00 grep --color=auto redis
      [root@XWF-MKZ:/usr/local/redis-5.0.0]#tail -f /usr/local/redis-5.0.0/logs/redis--sentinel-2222.log 
      8531:X 30 Oct 2018 19:19:34.507 # Redis version=5.0.0, bits=64, commit=00000000, modified=0, pid=8531, just started
      8531:X 30 Oct 2018 19:19:34.507 # Configuration loaded
      8532:X 30 Oct 2018 19:19:34.511 * Increased maximum number of open files to 10032 (it was originally set to 1024).
      8532:X 30 Oct 2018 19:19:34.652 * Running mode=sentinel, port=22222.
      8532:X 30 Oct 2018 19:19:34.652 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
      8532:X 30 Oct 2018 19:19:34.778 # Sentinel ID is 2de562513d7f6923704dd231ca1be1a1370f77c4
      8532:X 30 Oct 2018 19:19:34.778 # +monitor master mymaster 10.10.10.10 2222 quorum 2
      8532:X 30 Oct 2018 19:19:34.780 * +slave slave 11.11.11.11:2222 11.11.11.11 2222 @ mymaster 10.10.10.10 2222
      8532:X 30 Oct 2018 19:19:34.828 * +slave slave 12.12.12.12:2222 12.12.12.12 2222 @ mymaster 10.10.10.10 2222
      8532:X 30 Oct 2018 19:19:35.857 * +sentinel sentinel e36ae36386f876bf7845896fa7f47c666b4f2bb2 10.10.10.10 22222 @ mymaster 10.10.10.10 2222
      8532:X 01 Nov 2018 10:09:03.096 * +sentinel sentinel f894a10fb3da379d584801dd94ec8e9abfee869c 11.11.11.11 22222 @ mymaster 10.10.10.10 2222
      
      [root@XWF-MKZ:/usr/local/redis-5.0.0]# src/redis-sentinel ../redis-5.0.0/sentinel.conf 
      [root@XWF-MKZ:/usr/local/redis-5.0.0]# ps -ef|grep redis
      root      1472     1  0 09:44 ?        00:00:00 src/redis-sentinel 10.1.22.7:22222 [sentinel]  
      root      1574 24530  0 09:44 pts/0    00:00:00 grep --color=auto redis
      root     32484     1  0 Oct30 ?        00:06:17 /usr/local/redis-5.0.0/src/redis-server 10.1.22.7:2222
      [root@XWF-MKZ:/usr/local/redis-5.0.0]# tail -f /usr/local/redis-5.0.0/logs/redis--sentinel-2222.log 
      1471:X 01 Nov 2018 09:44:35.790 # Configuration loaded
      1472:X 01 Nov 2018 09:44:35.793 * Increased maximum number of open files to 10032 (it was originally set to 1024).
      1472:X 01 Nov 2018 09:44:35.794 * Running mode=sentinel, port=22222.
      1472:X 01 Nov 2018 09:44:35.794 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
      1472:X 01 Nov 2018 09:44:35.855 # Sentinel ID is f894a10fb3da379d584801dd94ec8e9abfee869c
      1472:X 01 Nov 2018 09:44:35.855 # +monitor master mymaster 10.10.10.10 2222 quorum 2
      1472:X 01 Nov 2018 09:44:35.857 * +slave slave 12.12.12.12:2222 12.12.12.12 2222 @ mymaster 10.10.10.10 2222
      1472:X 01 Nov 2018 09:44:35.883 * +slave slave 11.11.11.11:2222 11.11.11.11 2222 @ mymaster 10.10.10.10 2222
      1472:X 01 Nov 2018 09:44:36.004 * +sentinel sentinel e36ae36386f876bf7845896fa7f47c666b4f2bb2 10.10.10.10 22222 @ mymaster 10.10.10.10 2222
      1472:X 01 Nov 2018 09:44:36.177 * +sentinel sentinel 2de562513d7f6923704dd231ca1be1a1370f77c4 12.12.12.12 22222 @ mymaster 10.10.10.10 2222
 
      （5） 查看哨兵节点部署状态
       [root@XWF-BorgenCouchbase01:/usr/local/redis-5.0.0/src]# ./redis-cli -h 10.10.10.10 -p 22222 -a 'requirepass@fuck-id.com!!!'
       10.10.10.10:22222> info sentinel
       # Sentinel
       sentinel_masters:1
       sentinel_tilt:0
       sentinel_running_scripts:0
       sentinel_scripts_queue_length:0
       sentinel_simulate_failure_flags:0
       master0:name=mymaster,status=ok,address=10.10.10.10:2222,slaves=2,sentinels=3
       [root@XWF-BorgenCouchbase01:/usr/local/redis-5.0.0]# more sentinel.conf 
       ...
       # Generated by CONFIG REWRITE           //新生成相关信息
       
       
7、 哨兵高可用验证
 
      （1） Kill Master进程（10.10.10.10 redis.conf）
       [root@XWF-BorgenCouchbase01:/home/ubuntu]# kill -9 18558
       
      （2） 查看日志-Master服务（三台redis server sentinel日志均可）
       [root@XWF-BorgenCouchbase01:/usr/local/redis-5.0.0/logs]# tail -f redis--sentinel-2222.log
       23384:X 30 Oct 2018 18:44:51.252 # Configuration loaded
       23385:X 30 Oct 2018 18:44:51.253 * Increased maximum number of open files to 10032 (it was originally set to 1024).
       23385:X 30 Oct 2018 18:44:51.254 * Running mode=sentinel, port=22222.
       23385:X 30 Oct 2018 18:44:51.254 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
       23385:X 30 Oct 2018 18:44:51.296 # Sentinel ID is e36ae36386f876bf7845896fa7f47c666b4f2bb2
       23385:X 30 Oct 2018 18:44:51.296 # +monitor master mymaster 10.10.10.10 2222 quorum 2
       23385:X 30 Oct 2018 18:44:51.297 * +slave slave 12.12.12.12:2222 12.12.12.12.2222 @ mymaster 10.10.10.10 2222
       23385:X 30 Oct 2018 18:44:51.326 * +slave slave 11.11.11.11:2222 11.11.11.11 2222 @ mymaster 10.10.10.10 2222
       23385:X 30 Oct 2018 18:58:08.200 * +sentinel sentinel 2de562513d7f6923704dd231ca1be1a1370f77c4 12.12.12.12.22222 @ mymaster 10.10.10.10 2222
       23385:X 01 Nov 2018 09:47:34.352 * +sentinel sentinel f894a10fb3da379d584801dd94ec8e9abfee869c 11.11.11.11 22222 @ mymaster 10.10.10.10 2222
       23385:X 01 Nov 2018 10:01:03.563 # +sdown master mymaster 10.10.10.10 2222
       23385:X 01 Nov 2018 10:01:03.634 # +odown master mymaster 10.10.10.10 2222 #quorum 3/2
       23385:X 01 Nov 2018 10:01:03.634 # +new-epoch 1
       23385:X 01 Nov 2018 10:01:03.634 # +try-failover master mymaster 10.10.10.10 2222
       23385:X 01 Nov 2018 10:01:03.666 # +vote-for-leader e36ae36386f876bf7845896fa7f47c666b4f2bb2 1
       23385:X 01 Nov 2018 10:01:03.678 # f894a10fb3da379d584801dd94ec8e9abfee869c voted for f894a10fb3da379d584801dd94ec8e9abfee869c 1
       23385:X 01 Nov 2018 10:01:03.798 # 2de562513d7f6923704dd231ca1be1a1370f77c4 voted for e36ae36386f876bf7845896fa7f47c666b4f2bb2 1
       23385:X 01 Nov 2018 10:01:03.878 # +elected-leader master mymaster 10.10.10.10 2222
       23385:X 01 Nov 2018 10:01:03.878 # +failover-state-select-slave master mymaster 10.10.10.10 2222
       23385:X 01 Nov 2018 10:01:03.970 # +selected-slave slave 12.12.12.12:2222 12.12.12.12.2222 @ mymaster 10.10.10.10 2222
       23385:X 01 Nov 2018 10:01:03.970 * +failover-state-send-slaveof-noone slave 12.12.12.12:2222 12.12.12.12.2222 @ mymaster 10.10.10.10 2222
       23385:X 01 Nov 2018 10:01:04.053 * +failover-state-wait-promotion slave 12.12.12.12:2222 12.12.12.12.2222 @ mymaster 10.10.10.10 2222
       23385:X 01 Nov 2018 10:01:04.225 # +promoted-slave slave 12.12.12.12:2222 12.12.12.12.2222 @ mymaster 10.10.10.10 2222
       23385:X 01 Nov 2018 10:01:04.225 # +failover-state-reconf-slaves master mymaster 10.10.10.10 2222
       23385:X 01 Nov 2018 10:01:04.258 * +slave-reconf-sent slave 11.11.11.11:2222 11.11.11.11 2222 @ mymaster 10.10.10.10 2222
       23385:X 01 Nov 2018 10:01:04.607 * +slave-reconf-inprog slave 11.11.11.11:2222 11.11.11.11 2222 @ mymaster 10.10.10.10 2222
       23385:X 01 Nov 2018 10:01:04.607 * +slave-reconf-done slave 11.11.11.11:2222 11.11.11.11 2222 @ mymaster 10.10.10.10 2222
       23385:X 01 Nov 2018 10:01:04.673 # +failover-end master mymaster 10.10.10.10 2222
       23385:X 01 Nov 2018 10:01:04.674 # +switch-master mymaster 10.10.10.10 2222 12.12.12.12.2222
       23385:X 01 Nov 2018 10:01:04.674 * +slave slave 11.11.11.11:2222 11.11.11.11 2222 @ mymaster 12.12.12.12.2222
       23385:X 01 Nov 2018 10:01:04.674 * +slave slave 10.10.10.10:2222 10.10.10.10 2222 @ mymaster 12.12.12.12.2222
       23385:X 01 Nov 2018 10:01:34.717 # +sdown slave 10.10.10.10:2222 10.10.10.10 2222 @ mymaster 12.12.12.12.2222
       
      （3） 查看哨兵节点状态-Master服务
       [root@XWF-BorgenCouchbase01:/usr/local/redis-5.0.0/src]# ./redis-cli -h 10.10.10.10 -p 22222 info sentinel 
       # Sentinel
       sentinel_masters:1
       sentinel_tilt:0
       sentinel_running_scripts:0
       sentinel_scripts_queue_length:0
       sentinel_simulate_failure_flags:0
       master0:name=mymaster,status=ok,address=12.12.12.12:2222,slaves=2,sentinels=3
       即，主服务切换至12.12.12.12。哨兵节点认为新的主节点仍然有2个从节点，这是因为哨兵在将12切换成主节点的同时，将10节点置为其从节点；虽然10从节点已经挂掉，但是由于哨兵并不会对从
       节点进行客观下线（其含义将在原理部分介绍），因此认为该从节点一直存在。当10节点重新启动后，会自动变成12节点的从节点。
       
       经过一段时间，在12.12.12.12 服务器上查看各节点状态，如下：
       [root@testserver src]# ./redis-cli -h 12.12.12.12 -p 2222 -a 'requirepass@fuck-id.com!!!' info Replication
       Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.
       # Replication
       role:master
       connected_slaves:1                        //此时，仅显示11从节点
       slave0:ip=11.11.11.11,port=2222,state=online,offset=18940178,lag=1
       master_replid:b26cdea7d958b09dcf1cc473e000de42fd35d3ed
       master_replid2:017bda680e2d138dc56185299801e3da1fccb11f
       master_repl_offset:18940313
       second_repl_offset:18716147
       repl_backlog_active:1
       repl_backlog_size:1048576
       repl_backlog_first_byte_offset:17891738
       repl_backlog_histlen:1048576


8、  哨兵模式总结：

     （1） 哨兵系统中的主从节点，与普通的主从节点一致，故障发现和转移是由哨兵来控制和完成
     （2） 哨兵节点本质上是redis节点，只需要配置监控主节点，便可以自动发现其他的哨兵节点和从节点
     （3） 在哨兵节点启动和故障转移阶段，各个节点的配置文件会被重写(config rewrite)
     （4） 一个哨兵可以监控多个主节点，通过配置多条sentinel monitor即可
